package base.View;

import base.Cars_Db_clients;
import base.Connection.MyCNX;
import base.RepairsService;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * Form for checking and printing full car service history
 *
 * @author 0896
 */
public class JFrame_Scrv_Car_History extends javax.swing.JFrame {
    //Coordinats for jform mouse draging

    int xMouse;
    int yMouse;
//Connection to database
    Connection connct = MyCNX.getConnection();

    public JFrame_Scrv_Car_History() {
        initComponents();
        
        seticon();//sets icon

        //Sets bacground to transparent
        this.setBackground(new Color(0, 0, 0, 0));
        //Centers the form
        this.setLocationRelativeTo(null);
        //
        jPnlMain.setBackground(new Color(0, 0, 0, 0));
        jPnlServices.setVisible(false);
        jBtnIndividualReports.setVisible(false);
        jPnlServices.setBackground(new Color(0, 0, 0, 0));
        jPnlTablCars.setVisible(true);
        jPnlTablCars.setBackground(new Color(0, 0, 0, 0));
        jLblDateServiced.setText("");
        jLblDateTime.setText("");

        //Fils the table
        initCars();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPnlMain = new javax.swing.JPanel();
        jPnlMain2 = new javax.swing.JPanel();
        jLblCarAddNumReg = new javax.swing.JLabel();
        jTxtFldRegNCA = new javax.swing.JTextField();
        jBtnShowCarH = new javax.swing.JButton();
        jPnlTablCars = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTb_Cars = new javax.swing.JTable();
        jPnlServices = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTblServ = new javax.swing.JTable();
        jBtnBack = new javax.swing.JButton();
        jLblCarOwnerName = new javax.swing.JLabel();
        jLblOwnerOfCar = new javax.swing.JLabel();
        jLblDateTime = new javax.swing.JLabel();
        jLblDateServiced = new javax.swing.JLabel();
        jBtnPrinrtReport = new javax.swing.JButton();
        jLblTitle = new javax.swing.JLabel();
        jBtnIndividualReports = new javax.swing.JButton();
        jLblPicMain = new javax.swing.JLabel();
        jPnlTopFrame = new javax.swing.JPanel();
        jLabel_close = new javax.swing.JLabel();
        jLabel_minimize = new javax.swing.JLabel();
        jLblTopFrame = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlMain.setBackground(new java.awt.Color(255, 255, 255));
        jPnlMain.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPnlMain2.setBackground(new java.awt.Color(0, 84, 140));
        jPnlMain2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLblCarAddNumReg.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLblCarAddNumReg.setForeground(new java.awt.Color(255, 255, 255));
        jLblCarAddNumReg.setText("Registration number :");
        jPnlMain2.add(jLblCarAddNumReg, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, 20));

        jTxtFldRegNCA.setEditable(false);
        jTxtFldRegNCA.setBackground(new java.awt.Color(62, 62, 62));
        jTxtFldRegNCA.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jTxtFldRegNCA.setForeground(new java.awt.Color(255, 255, 255));
        jTxtFldRegNCA.setOpaque(false);
        jTxtFldRegNCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtFldRegNCAActionPerformed(evt);
            }
        });
        jPnlMain2.add(jTxtFldRegNCA, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 200, 30));

        jBtnShowCarH.setBackground(new java.awt.Color(0, 84, 140));
        jBtnShowCarH.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jBtnShowCarH.setForeground(new java.awt.Color(255, 255, 255));
        jBtnShowCarH.setText("Show Service History");
        jBtnShowCarH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnShowCarHActionPerformed(evt);
            }
        });
        jPnlMain2.add(jBtnShowCarH, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, 180, 40));

        jPnlTablCars.setBackground(new java.awt.Color(0, 84, 140));
        jPnlTablCars.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTb_Cars.setBackground(new java.awt.Color(102, 102, 102));
        jTb_Cars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "REG", "VIN", "MAKE", "MODEL", "Mileage", "type", "fueling", "gearbox", "drivetrain", "CC", "POWER"
            }
        ));
        jTb_Cars.getTableHeader().setReorderingAllowed(false);
        jTb_Cars.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTb_CarsMouseClicked(evt);
            }
        });
        jTb_Cars.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTb_CarsKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTb_Cars);

        jPnlTablCars.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 940, 570));

        jPnlMain2.add(jPnlTablCars, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, 960, 590));

        jPnlServices.setBackground(new java.awt.Color(0, 84, 140));
        jPnlServices.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        jTblServ.setBackground(new java.awt.Color(62, 62, 62));
        jTblServ.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTblServ.setForeground(new java.awt.Color(255, 255, 255));
        jTblServ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Worker", "Type", "Desciption", "Car", "Client ", "Parts", "Price", "VAT", "Discount", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTblServ.getTableHeader().setReorderingAllowed(false);
        jTblServ.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblServMouseClicked(evt);
            }
        });
        jTblServ.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTblServKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTblServ);

        jPnlServices.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 920, 560));

        jPnlMain2.add(jPnlServices, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, 950, 570));

        jBtnBack.setBackground(new java.awt.Color(0, 84, 140));
        jBtnBack.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jBtnBack.setForeground(new java.awt.Color(255, 255, 255));
        jBtnBack.setText("Back");
        jBtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBackActionPerformed(evt);
            }
        });
        jPnlMain2.add(jBtnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 330, 100, 40));

        jLblCarOwnerName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLblCarOwnerName.setForeground(new java.awt.Color(255, 255, 255));
        jLblCarOwnerName.setText("None");
        jPnlMain2.add(jLblCarOwnerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 200, -1));

        jLblOwnerOfCar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLblOwnerOfCar.setForeground(new java.awt.Color(255, 255, 255));
        jLblOwnerOfCar.setText("Owner :");
        jPnlMain2.add(jLblOwnerOfCar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, -1));

        jLblDateTime.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLblDateTime.setForeground(new java.awt.Color(255, 255, 255));
        jLblDateTime.setText("No date/time");
        jPnlMain2.add(jLblDateTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 150, 150, 30));

        jLblDateServiced.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLblDateServiced.setForeground(new java.awt.Color(255, 255, 255));
        jLblDateServiced.setText("Date Serviced :");
        jPnlMain2.add(jLblDateServiced, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 110, 30));

        jBtnPrinrtReport.setBackground(new java.awt.Color(0, 84, 140));
        jBtnPrinrtReport.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jBtnPrinrtReport.setForeground(new java.awt.Color(255, 255, 255));
        jBtnPrinrtReport.setText("Print All Reports");
        jBtnPrinrtReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPrinrtReportActionPerformed(evt);
            }
        });
        jPnlMain2.add(jBtnPrinrtReport, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, 180, 40));

        jLblTitle.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jLblTitle.setForeground(new java.awt.Color(255, 255, 255));
        jLblTitle.setText("Car Service History Maintenance Record Log");
        jPnlMain2.add(jLblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, 560, -1));

        jBtnIndividualReports.setBackground(new java.awt.Color(0, 84, 140));
        jBtnIndividualReports.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jBtnIndividualReports.setForeground(new java.awt.Color(255, 255, 255));
        jBtnIndividualReports.setText("Print Selected Report");
        jBtnIndividualReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIndividualReportsActionPerformed(evt);
            }
        });
        jPnlMain2.add(jBtnIndividualReports, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, 180, 40));

        jLblPicMain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Print1.png"))); // NOI18N
        jPnlMain2.add(jLblPicMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1240, 650));

        jPnlMain.add(jPnlMain2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 1260, 670));

        jPnlTopFrame.setBackground(new java.awt.Color(51, 51, 51));
        jPnlTopFrame.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_close.setBackground(new java.awt.Color(255, 0, 51));
        jLabel_close.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel_close.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_close.setText("  X");
        jLabel_close.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        jLabel_close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel_close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_closeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel_closeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel_closeMouseExited(evt);
            }
        });
        jPnlTopFrame.add(jLabel_close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 0, 30, 30));

        jLabel_minimize.setBackground(new java.awt.Color(153, 153, 153));
        jLabel_minimize.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel_minimize.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_minimize.setText("  -");
        jLabel_minimize.setToolTipText("");
        jLabel_minimize.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        jLabel_minimize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel_minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_minimizeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel_minimizeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel_minimizeMouseExited(evt);
            }
        });
        jPnlTopFrame.add(jLabel_minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 0, 30, 30));

        jLblTopFrame.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLblTopFrameMouseDragged(evt);
            }
        });
        jLblTopFrame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLblTopFrameMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLblTopFrameMousePressed(evt);
            }
        });
        jPnlTopFrame.add(jLblTopFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, 30));

        jPnlMain.add(jPnlTopFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, -1));

        getContentPane().add(jPnlMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, 700));

        setSize(new java.awt.Dimension(1359, 914));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel_closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_closeMouseClicked
        //Disposes of the form on exit
        this.dispose();
    }//GEN-LAST:event_jLabel_closeMouseClicked

    private void jLabel_closeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_closeMouseEntered
        //Label top panel close mouse entered colour change
        Border label_border = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.gray);
        jLabel_close.setBorder(label_border);
        jLabel_close.setForeground(Color.gray);
        jLabel_close.setOpaque(true);
        jLabel_close.setBackground(Color.RED);
    }//GEN-LAST:event_jLabel_closeMouseEntered

    private void jLabel_closeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_closeMouseExited
//Label top paenm close mouse exited color defaut reset
        Border label_border = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.white);
        jLabel_close.setBorder(label_border);
        jLabel_close.setForeground(Color.white);
        jLabel_close.setOpaque(false);
    }//GEN-LAST:event_jLabel_closeMouseExited

    private void jLabel_minimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_minimizeMouseClicked
//Minimize the  jform 
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabel_minimizeMouseClicked

    private void jLabel_minimizeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_minimizeMouseEntered
        // Minimize client management window mouse entered
        Border label_border = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.gray);
        jLabel_minimize.setBorder(label_border);
        jLabel_minimize.setForeground(Color.gray);
        jLabel_minimize.setOpaque(true);
        jLabel_close.setBackground(new Color(153, 153, 153));
    }//GEN-LAST:event_jLabel_minimizeMouseEntered

    private void jLabel_minimizeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_minimizeMouseExited
        // Minimize client management window mouse exited
        Border label_border = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.white);
        jLabel_minimize.setBorder(label_border);
        jLabel_minimize.setForeground(Color.white);
        jLabel_minimize.setOpaque(false);
    }//GEN-LAST:event_jLabel_minimizeMouseExited

    private void jLblTopFrameMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLblTopFrameMouseDragged
        //Top panel draging functionality
        int coordX = evt.getXOnScreen();
        int coordY = evt.getYOnScreen();
        this.setLocation(coordX - xMouse, coordY - yMouse);
    }//GEN-LAST:event_jLblTopFrameMouseDragged

    private void jLblTopFrameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLblTopFrameMouseClicked
        // 2 Clicks centr Form
        if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            //System.out.println("double clicked");
            this.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_jLblTopFrameMouseClicked

    private void jLblTopFrameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLblTopFrameMousePressed
        //Gets mouse cusrsor coordinates
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_jLblTopFrameMousePressed

    private void jTb_CarsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTb_CarsMouseClicked
        //Gets adn shows the selected car's registration number from the jtable
        showNum();
    }//GEN-LAST:event_jTb_CarsMouseClicked

    private void jTb_CarsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTb_CarsKeyReleased
        //On arrow keys up and down shows car registration number in textfield
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            //Gets adn shows the selected car's registration number from the jtables
            showNum();
        }
    }//GEN-LAST:event_jTb_CarsKeyReleased

    private void jTblServMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblServMouseClicked
        //Gets and shows date that the service or repair is made for the selected car form the jtable
        showDateToField();
    }//GEN-LAST:event_jTblServMouseClicked

    private void jTblServKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblServKeyReleased
        //On arrow key up or down from the jtable
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            //Gets and shows date that the service or repair is made for the selected car form the jtable
            showDateToField();
        }
    }//GEN-LAST:event_jTblServKeyReleased

    private void jBtnShowCarHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnShowCarHActionPerformed
        //Shows service history
   DefaultTableModel model = (DefaultTableModel) jTblServ.getModel();
        if( !jTxtFldRegNCA.getText().equals("")){
        //Initialize components
        jPnlServices.setVisible(true);
        jPnlTablCars.setVisible(false);

        jBtnIndividualReports.setVisible(true);//Button for individual reports
        jLblDateServiced.setText("Date Serviced :");
        jLblDateTime.setText("No date/time");
        //Gets table model
       
        model.setRowCount(0);
        ArrayList<RepairsService> srvcList = new ArrayList<RepairsService>();

        //SQL Query
        String query = "SELECT * FROM `repairs_maintenance` WHERE `car_id` = '" + jTxtFldRegNCA.getText() + "' ";
        Statement st;
        ResultSet rs;

        try {
            st = connct.createStatement();
            rs = st.executeQuery(query);
            RepairsService repairsService;
            while (rs.next()) {
                repairsService = new RepairsService(rs.getInt("id"),
                        rs.getString("worker"), rs.getString("type"), rs.getString("description"),
                        rs.getString("car_id"), rs.getString("client_id"),
                        rs.getString("part_oem"), rs.getString("timestamp"),
                        rs.getString("price"), rs.getString("vat"),
                        rs.getString("discount"), rs.getString("time"));

                srvcList.add(repairsService);
            }
            Object[] row = new Object[11];//object array of 11 elements 
            for (int i = 0; i < srvcList.size(); i++) {
                //For Loop with length equals to the services from table 
                //Gets info from each row
                row[0] = srvcList.get(i).getIdSrvc();//
                row[1] = srvcList.get(i).getWorkerSrvc();//
                row[2] = srvcList.get(i).getTypeSrvc();//
                row[3] = srvcList.get(i).getdescSrvc();//
                row[4] = srvcList.get(i).getCarIdSrvc();//
                row[5] = srvcList.get(i).getClientIdSrvc();//
                row[6] = srvcList.get(i).getPartOEMSrvc();//
                row[7] = srvcList.get(i).getPriveSrvc();//
                row[8] = srvcList.get(i).getVatSrvc();//
                row[9] = srvcList.get(i).getDiscountSrvc();//
                row[10] = srvcList.get(i).gettimeSrvc();// 
                //Adds rows to ther jtable
                model.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
        }
        }
    }//GEN-LAST:event_jBtnShowCarHActionPerformed

    private void jBtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBackActionPerformed
        //Back button
        back();
    }//GEN-LAST:event_jBtnBackActionPerformed

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
        //Shows cars service made
        showDateToField();
    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void jTxtFldRegNCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtFldRegNCAActionPerformed

    }//GEN-LAST:event_jTxtFldRegNCAActionPerformed

    private void jBtnPrinrtReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPrinrtReportActionPerformed
        //Prints report
        int result = 2;//Result for windows closing option

        String carNum = jTxtFldRegNCA.getText();//Gets  Car number from the textfield

        try {//Checks if teh selected car have previous services added 
            String query = "SELECT * FROM `repairs_maintenance` WHERE `car_id` = '" + carNum + "' ";
            Statement st;
            ResultSet rs;
            st = connct.createStatement();
            rs = st.executeQuery(query);
            if (rs.next()) {//if it have previous services
              //  System.out.println("Has next");
                printReport();//Prints the report  
            } else {//if it does not have previous services
                //Dialog window to ask if we want to print car details anyway
                result = JOptionPane.showConfirmDialog(this, " No service data found for car with number : " + carNum + " ",
                        "Do you really want to save the report ?", 2);
                System.out.println(result);
                // yes -> 0
                // no ->  1
                // cancel  -> 2  
                if (result == 0) {//if yes
                    printReport();//Prints the report 
                } else {
                    JOptionPane.showMessageDialog(this, "Data not saved ! ", "No report saved !", 1);
                }
            }

        } catch (Exception e) {//Checks if teh selected car have previoust services added 
            e.printStackTrace();
        }
    }//GEN-LAST:event_jBtnPrinrtReportActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
//On jform exit Close the connection to the SQL DB
        try {
            this.finalize();
            connct.close();//Close the SQL DB connection
        } catch (Throwable ex) {
            Logger.getLogger(JFrame_Scrv_Car_History.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jBtnIndividualReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIndividualReportsActionPerformed
        //Prints the report for the selected row only

        int result = 2;//Result for windows closing option

        String carNum = jTxtFldRegNCA.getText();//Gets  Car number from the textfield

        try {//Checks if teh selected car have previous services added 
            String query = "SELECT * FROM `repairs_maintenance` WHERE `car_id` = '" + carNum + "' ";
            Statement st;
            ResultSet rs;
            st = connct.createStatement();
            rs = st.executeQuery(query);
            if (rs.next()) {//if it have previous services
                System.out.println("Has next");
                selectedReport();//Prints the report  
            } else {//if it does not have previous services
                 back();
            }

        } catch (Exception e) {//Checks if teh selected car have previoust services added 
            e.printStackTrace();
        }


    }//GEN-LAST:event_jBtnIndividualReportsActionPerformed

    public void initCars() {
        //Gets cars for input in the jtable cars
        DefaultTableModel model = (DefaultTableModel) jTb_Cars.getModel();
        ArrayList<Cars_Db_clients> list = null;
        list = new ArrayList<Cars_Db_clients>();
        try {
            //SQL Query for cars 
            String qry = "SELECT * FROM `clients_cars_record` Car_Reg_Num_cl ORDER BY `Car_Reg_Num_cl` DESC ";
            Statement st = connct.createStatement();
            ResultSet rs = st.executeQuery(qry);
            Cars_Db_clients cars_Db_clients;
            while (rs.next()) {
                cars_Db_clients = new Cars_Db_clients(rs.getString("Car_Reg_Num_cl"), rs.getString("Car_Vin_Num_cl"),
                        rs.getString("Car_Make_cl"), rs.getString("Car_Model_cl"), rs.getString("Car_Mileage_cl"),
                        rs.getString("Car_VehicleType_cl"), rs.getString("Car_FuelSys_cl"), rs.getString("Car_Gearbox_cl"),
                        rs.getString("Car_ManufactureDate_cl"), rs.getString("Car_Drivetrain_cl"),
                        rs.getString("Car_EngineDisplacementl_cl"), rs.getString("Car_Power_cl"), rs.getString("Car_DateTime_Created_cl"));
                list.add(cars_Db_clients);
            }

            model.setRowCount(0); // clears the table rows

            Object[] row = new Object[11];
            for (int i = 0; i < list.size(); i++) {
                row[0] = list.get(i).getregNum();
                row[1] = list.get(i).getVIN();
                row[2] = list.get(i).getMake();
                row[3] = list.get(i).getModel();
                row[4] = list.get(i).getMileage();
                row[5] = list.get(i).getType();
                row[6] = list.get(i).getFueling();
                row[7] = list.get(i).getGearbox();
                row[8] = list.get(i).getDrivtrn();
                row[9] = list.get(i).getCC();
                row[10] = list.get(i).getKW();
                //Adds rows to thetable
                model.addRow(row);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void Show_Srvc_In_JTable() {
        // Display Data for repairs adn services In JTable
        ArrayList<RepairsService> list = getSrvcList();
        DefaultTableModel model = (DefaultTableModel) jTblServ.getModel();
        Object[] row = new Object[10];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getIdSrvc();
            row[1] = list.get(i).getTypeSrvc();
            row[2] = list.get(i).getdescSrvc();
            row[3] = list.get(i).getCarIdSrvc();
            row[4] = list.get(i).getClientIdSrvc();
            row[5] = list.get(i).getPartOEMSrvc();
            row[6] = list.get(i).getPriveSrvc();
            row[7] = list.get(i).getVatSrvc();
            row[8] = list.get(i).getDiscountSrvc();
            row[9] = list.get(i).gettimeSrvc();
            //Add rows to the table
            model.addRow(row);
        }
    }

    public ArrayList<RepairsService> getSrvcList() {
        // get a list of parts from mysql database
        ArrayList<RepairsService> srvcList = new ArrayList<RepairsService>();
        // SQL Query for repar services
        String query = "SELECT * FROM  `repairs_maintenance` ";
        Statement st;
        ResultSet rs;

        try {
            st = connct.createStatement();
            rs = st.executeQuery(query);
            RepairsService repairsService;
            while (rs.next()) {
                repairsService = new RepairsService(rs.getInt("id"),
                        rs.getString("worker"), rs.getString("type"), rs.getString("description"),
                        rs.getString("car_id"), rs.getString("client_id"),
                        rs.getString("part_oem"), rs.getString("timestamp"),
                        rs.getString("price"), rs.getString("vat"),
                        rs.getString("discount"), rs.getString("time"));

                srvcList.add(repairsService);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
        }
        return srvcList;
    }

    public void showNum() {
        //Shows client details in jlabel

        //Gets table model
        TableModel model = jTb_Cars.getModel();
        //Sets int index to table selected row
        int index = jTb_Cars.getSelectedRow();
        //Sets car reg number textfield text based in selected row from the table
        jTxtFldRegNCA.setText(model.getValueAt(index, 0).toString());
        //Sets text for the car owner name
        jLblCarOwnerName.setText("None");

        try {
            Statement st = connct.createStatement();
            //SQL Query to get selected car's owner name
            ResultSet rs = st.executeQuery("SELECT * FROM `clients_cars_record` "
                    + "WHERE `Car_Reg_Num_cl` LIKE '" + jTxtFldRegNCA.getText() + "' ORDER BY `Car_Reg_Num_cl` ASC");
            if (rs.next()) {
                String id = rs.getString("cl_Owner_car");
                //SQL Query to get selected 
                ResultSet rs1 = st.executeQuery("SELECT * FROM `clientdetails` "
                        + "WHERE `id` = " + id + " ORDER BY `id` ASC");
                if (rs1.next()) {
                    String name = rs1.getString("fname");
                    String fname = rs1.getString("lname");
                    //Sets label to show id first name and last name  of the client 
                    jLblCarOwnerName.setText(id + " " + name + " " + fname);
                }
            } else {
            }
        } catch (Exception ex) {
            ex.printStackTrace();

        } finally {
        }
    }

    public void showDateToField() {
        //Shows selected cars date tiem serviced
        jLblDateTime.setText("No date/time");
        TableModel model = jTblServ.getModel();
        if( model.getRowCount()!=0 && !jTxtFldRegNCA.getText().equals("")){
        try {
            //Gets table model
   
            //Gets the index of teh selected row from the table
            int index = jTblServ.getSelectedRow();

            Statement st = connct.createStatement();
            //SQL Query to get cars 
            ResultSet rs = st.executeQuery("SELECT * FROM `repairs_maintenance` "
                    + "WHERE `id` = '" + (model.getValueAt(index, 0).toString()) + "' "
                    + "AND `car_id` = '" + jTxtFldRegNCA.getText() + "' ");
            if (rs.next()) {
                String id = rs.getString("timestamp");
                //Shows selected cars date tiem serviced in the jlabel
                jLblDateTime.setText(id);
            } else {
            }
        } catch (Exception ex) {
            ex.printStackTrace();

        } finally {
        }
        }//if no rows 
    }

    public void printReport() {

        String RegNumC = jTxtFldRegNCA.getText();

        // Prints Selected car Service history
        if (!RegNumC.equals("")) {//Chewck if car reg number is selected
            //chose file save dest
            String userDir = System.getProperty("user.home");//Gets local machine system dir
            JFileChooser dialog = new JFileChooser();
            dialog.setCurrentDirectory(new File((userDir + "/Desktop")));//Opens home directory in current user 
            dialog.setSelectedFile(new File(RegNumC + "-Service_Reports_All" + ".pdf"));//Sets defaut name to contain the selected car reg number 
            int dialogResult = dialog.showSaveDialog(null);

            //if save ==yes
            if (dialogResult == JFileChooser.APPROVE_OPTION) {//On aprove option
                //Save service history
                try {
                    String filePath = dialog.getSelectedFile().getPath();

                    Document myDocument = new Document();
                    PdfWriter myWriter = PdfWriter.getInstance(myDocument, new FileOutputStream(filePath, true));//PDF writer for the output document
                    myDocument.open();//Opens the document

                    try {
                        //Gets car details for the report of the chosen car scervice history  
                        Statement stClients = connct.createStatement();
                        //SQL query for the selected car details form SQL DB
                        ResultSet rsClients = stClients.executeQuery("SELECT * FROM `clients_cars_record` WHERE `Car_Reg_Num_cl` = '" + RegNumC + "' ");

                        if (rsClients.next()) {//Prints car details only once
                            //Gets info for Vehicle from SQL DB
                            String regCar = rsClients.getString("Car_Reg_Num_cl");//Vehicle registration number
                            String vinCar = rsClients.getString("Car_Vin_Num_cl");//Vehicle VIN number
                            String makeCar = rsClients.getString("Car_Make_cl");//Vehicle make
                            String modCar = rsClients.getString("Car_Model_cl");//Vehicle model
                            String milCar = rsClients.getString("Car_Mileage_cl");//Vehicle mileage
                            String typeCar = rsClients.getString("Car_VehicleType_cl");//Vehicle type
                            String fuelsysCar = rsClients.getString("Car_FuelSys_cl");//Vehicle fuel system
                            String gearbCar = rsClients.getString("Car_Gearbox_cl");//Vehicle gearbox
                            String mandCar = rsClients.getString("Car_ManufactureDate_cl");//Vehicle manufacture date
                            String drtrainCar = rsClients.getString("Car_Drivetrain_cl");//Vehicle drivetrain
                            String dispCar = rsClients.getString("Car_EngineDisplacementl_cl");//Vehicle engine dispalcement
                            String powerCar = rsClients.getString("Car_Power_cl");//Vehicle power output

                            //Testing output
                            System.out.println(regCar + " " + vinCar + " " + makeCar + " " + modCar + " " + milCar + " " + typeCar + " " + fuelsysCar + " " + gearbCar + " " + mandCar + " " + drtrainCar + " " + dispCar + " " + powerCar);

                            //Print info for the chosen car 
                            myDocument.add(new Paragraph("                           SERVICE HISTORY DETAILS", FontFactory.getFont(FontFactory.TIMES_BOLD, 20, Font.BOLD)));
                            myDocument.add(new Paragraph("                                                      " + (new Date().toString())));//Gets new instance of local machine date time Used for document timestamp
                            myDocument.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------------------"));
                            myDocument.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------------------"));
                            myDocument.add((new Paragraph("Vehicle Details", FontFactory.getFont(FontFactory.TIMES_ROMAN, 15, Font.BOLD))));
                            myDocument.add((new Paragraph("Vehicle Registration Number :" + regCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle VIN Number: " + vinCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Make  :" + makeCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Model : " + modCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Mileage  :" + milCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Type: " + typeCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Fuel System  :" + fuelsysCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Gearbox : " + gearbCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Manufacture Date  :" + mandCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Drivetrain : " + drtrainCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Engine Displacement :" + dispCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Power : " + powerCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------------------"));
                            myDocument.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------------------"));
                            //End of car details

                            //SQL query to get info for the selected service or repair if exists
                            String queryScv = "SELECT * FROM `repairs_maintenance` WHERE `car_id` = '" + RegNumC + "' ";
                            Statement stScv;//Statement for Services
                            ResultSet rsScv;//Result set for Services

                            try {
                                //Get service details 
                                stScv = connct.createStatement();//Statement for Services
                                rsScv = stScv.executeQuery(queryScv);//Result set for Services

                                while (rsScv.next()) {

                                    int id = rsScv.getInt("id");//Service ID number
                                    String worker = rsScv.getString("worker");//Worker made the repair/service
                                    String type = rsScv.getString("type");//Servyce type
                                    String description = rsScv.getString("description");//Service description
                                    String carid = rsScv.getString("car_id");//Serviced car registration number 
                                    String clid = rsScv.getString("client_id");//Serviced client id and name  
                                    String oem = rsScv.getString("part_oem");//Service used part OEM number
                                    String price = rsScv.getString("price");//Service price //-------USED IN CALCULATION OF TOTAL PRICE!!!
                                    String vat = rsScv.getString("vat");//Service tax//------USED IN CALCULATION OF TOTAL PRICE!!!
                                    String discount = rsScv.getString("discount");//Service discount in % //------USED IN CALCULATION OF TOTAL PRICE!!!
                                    String time = rsScv.getString("time");//Service duration needed for executuin //!!! not used in calculation of total price

                                    //Price tax and discount parsing to integer for calculation
                                    int baseprice = Integer.parseInt(price);//Getting price of the service to integer for calculation
                                    int taxSrvc = Integer.parseInt(vat);//Getting tax of the service to integer for calculation
                                    int discountrate = Integer.parseInt(discount);//Getting the discount of the service  to integer for calculation
                                    //Total price calculation
                                    int discountamt = baseprice * discountrate / 100;//Duscount calculation
                                    int priceDiscountedSrvc = baseprice - discountamt;//price calculation
                                    int taxamt = priceDiscountedSrvc * taxSrvc / 100;//tax calculation
                                    int finalprice = taxamt + priceDiscountedSrvc;//Total taxed and discounted price calculation

                                    //Service repair details
                                    myDocument.add((new Paragraph("SERVICE DETAILS", FontFactory.getFont(FontFactory.TIMES_ROMAN, 15, Font.BOLD))));
                                    myDocument.add((new Paragraph("Worker  :" + worker, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Type : " + type, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Description : " + description, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Client   :" + clid, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Time duration  : " + time, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Used parts OEM number : " + oem, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Price  : " + price + " BGN ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Tax : " + vat + " % ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Discount    : " + discount + " % ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add(new Paragraph("-------------------------------------"));
                                    //End of service repair detail

                                    Statement stParts;//Statement for parts
                                    ResultSet rsParts;//Result set for parts
                                    //SQL query 2 to get parts cost and tax values if exists
                                    String queryParts = "SELECT * FROM `new_parts` WHERE `parts_OEM_Num` LIKE '" + oem + "' ORDER BY `parts_OEM_Num` ASC";

                                    try {
                                        stParts = connct.createStatement();
                                        rsParts = stParts.executeQuery(queryParts);

                                        while (rsParts.next()) {
                                            String priceParts = rsParts.getString("parts_Cost");//Part used cost bgn //------USED IN CALCULATION OF TOTAL PRICE!!!
                                            String taxParts = rsParts.getString("parts_VAT");//Part used tax in % //------USED IN CALCULATION OF TOTAL PRICE!!!

                                            //Print parts that are used in the repair
                                            //  myDocument.add(new Paragraph("-------------------------------------------------------------------------------------------"));
                                            myDocument.add((new Paragraph("Parts used ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 15, Font.BOLD))));
                                            myDocument.add((new Paragraph("OEM number part  :" + oem, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add((new Paragraph("PRICE parts : " + priceParts, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add((new Paragraph("TAX parts : " + taxParts + " % ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add(new Paragraph("-------------------------------------"));

                                            //Parsing values for price and tax to integer for calculation
                                            int pricePart = Integer.parseInt(priceParts);
                                            int taxPart = Integer.parseInt(taxParts);

                                            //Caldcualtion of the part price adn total
                                            int baseTl = pricePart + baseprice;//Part price
                                            int taxTotal = pricePart * taxPart / 100;//Taxed part price
                                            int totalParts = pricePart + taxTotal;//Total part price
                                            //Total price
                                            int totalTotal = totalParts + finalprice;//Total parts and services

                                            myDocument.add((new Paragraph("Baseprice : " + baseTl + " BGN ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add((new Paragraph("Discount of the service : " + discountamt + " BGN ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add((new Paragraph("Tax of the part : " + taxTotal + " BGN ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add((new Paragraph("Tax of the service : " + taxamt + " BGN ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add(new Paragraph("-----------"));
                                            myDocument.add((new Paragraph("(Total price  : " + totalTotal + " BGN )", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------------------"));
                                        }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }

                                    //Testing the output
                                    System.out.println(worker + " " + type + " " + description + " " + carid + " " + clid + " " + oem + " " + price + " " + vat + " " + discount + time);

                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            } finally {
                                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                                LocalDateTime now = LocalDateTime.now();
                                myDocument.add((new Paragraph(" ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                myDocument.add((new Paragraph(" ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                myDocument.add((new Paragraph("Mechanic's Signature :  .......................                                                                            Client's Signature :  .......................  ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                myDocument.add((new Paragraph(" ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                myDocument.add((new Paragraph("                                                                     Service Comfort   " + dtf.format(now), FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            }

                        } else {//If no data present in the SQL DB
                            JOptionPane.showMessageDialog(null, "No Data");
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();

                    } finally {
                        //Closes the document
                        myDocument.newPage();
                        myDocument.close();
                    }
                    //Success message
                    JOptionPane.showMessageDialog(null, "Report was successfully generated");
                } catch (DocumentException ex) {
                    Logger.getLogger(JFrame_Scrv_Car_History.class.getName()).log(Level.SEVERE, null, ex);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(JFrame_Scrv_Car_History.class.getName()).log(Level.SEVERE, null, ex);
                }
            }//On aprove option
        } else {
            JOptionPane.showMessageDialog(null, "Please select Vehicle");
        }//IF car selected

    }

    public void back() {
        //Button back disposes  the form adn loads it again
        this.dispose();
        JFrame_Scrv_Car_History History = new JFrame_Scrv_Car_History();
        History.setVisible(true);
    }

    public void selectedReport() {
        //Prints selected rows report only
        TableModel model = jTblServ.getModel();
        //Gets the index of the selected row
        int index = jTblServ.getSelectedRow();

        String srvcID = (model.getValueAt(index, 0).toString());//Gets id of the service

        System.out.println(srvcID);

        String RegNumC = jTxtFldRegNCA.getText();

        // Prints Selected car Service history
        if (!RegNumC.equals("")) {//Chewck if car reg number is selected
            //chose file save dest
            String userDir = System.getProperty("user.home");//Gets local machine system dir
            JFileChooser dialog = new JFileChooser();
            dialog.setCurrentDirectory(new File((userDir + "/Desktop")));//Opens home directory in current user 
            dialog.setSelectedFile(new File(RegNumC+"-Selected_Service_Report_ID_"+srvcID+".pdf"));//Sets defaut name to contain the selected car reg number 
            int dialogResult = dialog.showSaveDialog(null);

            //if save ==yes
            if (dialogResult == JFileChooser.APPROVE_OPTION) {//On aprove option
                //Save service history
                try {
                    String filePath = dialog.getSelectedFile().getPath();

                    Document myDocument = new Document();
                    PdfWriter myWriter = PdfWriter.getInstance(myDocument, new FileOutputStream(filePath, true));//PDF writer for the output document
                    myDocument.open();//Opens the document

                    try {
                        //Gets car details for the report of the chosen car scervice history  
                        Statement stClients = connct.createStatement();
                        //SQL query for the selected car details form SQL DB
                        ResultSet rsClients = stClients.executeQuery("SELECT * FROM `clients_cars_record` WHERE `Car_Reg_Num_cl` = '" + RegNumC + "' ");

                        if (rsClients.next()) {//Prints car details only once
                            //Gets info for Vehicle from SQL DB
                            String regCar = rsClients.getString("Car_Reg_Num_cl");//Vehicle registration number
                            String vinCar = rsClients.getString("Car_Vin_Num_cl");//Vehicle VIN number
                            String makeCar = rsClients.getString("Car_Make_cl");//Vehicle make
                            String modCar = rsClients.getString("Car_Model_cl");//Vehicle model
                            String milCar = rsClients.getString("Car_Mileage_cl");//Vehicle mileage
                            String typeCar = rsClients.getString("Car_VehicleType_cl");//Vehicle type
                            String fuelsysCar = rsClients.getString("Car_FuelSys_cl");//Vehicle fuel system
                            String gearbCar = rsClients.getString("Car_Gearbox_cl");//Vehicle gearbox
                            String mandCar = rsClients.getString("Car_ManufactureDate_cl");//Vehicle manufacture date
                            String drtrainCar = rsClients.getString("Car_Drivetrain_cl");//Vehicle drivetrain
                            String dispCar = rsClients.getString("Car_EngineDisplacementl_cl");//Vehicle engine dispalcement
                            String powerCar = rsClients.getString("Car_Power_cl");//Vehicle power output

                            //Testing output
                            System.out.println(regCar + " " + vinCar + " " + makeCar + " " + modCar + " " + milCar + " " + typeCar + " " + fuelsysCar + " " + gearbCar + " " + mandCar + " " + drtrainCar + " " + dispCar + " " + powerCar);

                            //Print info for the chosen car 
                            myDocument.add(new Paragraph("                           SERVICE HISTORY DETAILS", FontFactory.getFont(FontFactory.TIMES_BOLD, 20, Font.BOLD)));
                            myDocument.add(new Paragraph("                                                      " + (new Date().toString())));//Gets new instance of local machine date time Used for document timestamp
                            myDocument.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------------------"));
                            myDocument.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------------------"));
                            myDocument.add((new Paragraph("Vehicle Details", FontFactory.getFont(FontFactory.TIMES_ROMAN, 15, Font.BOLD))));
                            myDocument.add((new Paragraph("Vehicle Registration Number :" + regCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle VIN Number: " + vinCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Make  :" + makeCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Model : " + modCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Mileage  :" + milCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Type: " + typeCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Fuel System  :" + fuelsysCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Gearbox : " + gearbCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Manufacture Date  :" + mandCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Drivetrain : " + drtrainCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Engine Displacement :" + dispCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add((new Paragraph("Vehicle Power : " + powerCar, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            myDocument.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------------------"));
                            myDocument.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------------------"));
                            //End of car details

                            //SQL query to get info for the selected service or repair if exists
                            String queryScv = "SELECT * FROM `repairs_maintenance` WHERE `id` = '" + srvcID + "' ";
                            Statement stScv;//Statement for Services
                            ResultSet rsScv;//Result set for Services

                            try {
                                //Get service details 
                                stScv = connct.createStatement();//Statement for Services
                                rsScv = stScv.executeQuery(queryScv);//Result set for Services

                                while (rsScv.next()) {

                                    int id = rsScv.getInt("id");//Service ID number
                                    String worker = rsScv.getString("worker");//Worker made the repair/service
                                    String type = rsScv.getString("type");//Servyce type
                                    String description = rsScv.getString("description");//Service description
                                    String carid = rsScv.getString("car_id");//Serviced car registration number 
                                    String clid = rsScv.getString("client_id");//Serviced client id and name  
                                    String oem = rsScv.getString("part_oem");//Service used part OEM number
                                    String price = rsScv.getString("price");//Service price //-------USED IN CALCULATION OF TOTAL PRICE!!!
                                    String vat = rsScv.getString("vat");//Service tax//------USED IN CALCULATION OF TOTAL PRICE!!!
                                    String discount = rsScv.getString("discount");//Service discount in % //------USED IN CALCULATION OF TOTAL PRICE!!!
                                    String time = rsScv.getString("time");//Service duration needed for executuin //!!! not used in calculation of total price

                                    //Price tax and discount parsing to integer for calculation
                                    int baseprice = Integer.parseInt(price);//Getting price of the service to integer for calculation
                                    int taxSrvc = Integer.parseInt(vat);//Getting tax of the service to integer for calculation
                                    int discountrate = Integer.parseInt(discount);//Getting the discount of the service  to integer for calculation
                                    //Total price calculation
                                    int discountamt = baseprice * discountrate / 100;//Duscount calculation
                                    int priceDiscountedSrvc = baseprice - discountamt;//price calculation
                                    int taxamt = priceDiscountedSrvc * taxSrvc / 100;//tax calculation
                                    int finalprice = taxamt + priceDiscountedSrvc;//Total taxed and discounted price calculation

                                    //Service repair details
                                    myDocument.add((new Paragraph("SERVICE DETAILS", FontFactory.getFont(FontFactory.TIMES_ROMAN, 15, Font.BOLD))));
                                    myDocument.add((new Paragraph("Worker  :" + worker, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Type : " + type, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Description : " + description, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Client   :" + clid, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Time duration  : " + time, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Used parts OEM number : " + oem, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Price  : " + price + " BGN ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Tax : " + vat + " % ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add((new Paragraph("Discount    : " + discount + " % ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                    myDocument.add(new Paragraph("-------------------------------------"));
                                    //End of service repair detail

                                    Statement stParts;//Statement for parts
                                    ResultSet rsParts;//Result set for parts
                                    //SQL query 2 to get parts cost and tax values if exists
                                    String queryParts = "SELECT * FROM `new_parts` WHERE `parts_OEM_Num` LIKE '" + oem + "' ORDER BY `parts_OEM_Num` ASC";

                                    try {
                                        stParts = connct.createStatement();
                                        rsParts = stParts.executeQuery(queryParts);

                                        while (rsParts.next()) {
                                            String priceParts = rsParts.getString("parts_Cost");//Part used cost bgn //------USED IN CALCULATION OF TOTAL PRICE!!!
                                            String taxParts = rsParts.getString("parts_VAT");//Part used tax in % //------USED IN CALCULATION OF TOTAL PRICE!!!

                                            //Print parts that are used in the repair
                                            //  myDocument.add(new Paragraph("-------------------------------------------------------------------------------------------"));
                                            myDocument.add((new Paragraph("Parts used ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 15, Font.BOLD))));
                                            myDocument.add((new Paragraph("OEM number part  :" + oem, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add((new Paragraph("PRICE parts : " + priceParts, FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add((new Paragraph("TAX parts : " + taxParts + " % ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add(new Paragraph("-------------------------------------"));

                                            //Parsing values for price and tax to integer for calculation
                                            int pricePart = Integer.parseInt(priceParts);
                                            int taxPart = Integer.parseInt(taxParts);

                                            //Caldcualtion of the part price adn total
                                            int baseTl = pricePart + baseprice;//Part price
                                            int taxTotal = pricePart * taxPart / 100;//Taxed part price
                                            int totalParts = pricePart + taxTotal;//Total part price
                                            //Total price
                                            int totalTotal = totalParts + finalprice;//Total parts and services

                                            myDocument.add((new Paragraph("Baseprice : " + baseTl + " BGN ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add((new Paragraph("Discount of the service : " + discountamt + " BGN ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add((new Paragraph("Tax of the part : " + taxTotal + " BGN ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add((new Paragraph("Tax of the service : " + taxamt + " BGN ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add(new Paragraph("-----------"));
                                            myDocument.add((new Paragraph("(Total price  : " + totalTotal + " BGN )", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                            myDocument.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------------------"));
                                        }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }

                                    //Testing the output
                                    System.out.println(worker + " " + type + " " + description + " " + carid + " " + clid + " " + oem + " " + price + " " + vat + " " + discount + time);

                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            } finally {
                                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                                LocalDateTime now = LocalDateTime.now();
                                myDocument.add((new Paragraph(" ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                myDocument.add((new Paragraph(" ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                myDocument.add((new Paragraph("Mechanic's Signature :  .......................                                                                            Client's Signature :  .......................  ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                myDocument.add((new Paragraph(" ", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                                myDocument.add((new Paragraph("                                                                     Service Comfort   " + dtf.format(now), FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.PLAIN))));
                            }

                        } else {//If no data present in the SQL DB
                            JOptionPane.showMessageDialog(null, "No Data");
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();

                    } finally {
                        //Closes the document
                        myDocument.newPage();
                        myDocument.close();
                    }
                    //Success message
                    JOptionPane.showMessageDialog(null, "Report was successfully generated");
                } catch (DocumentException ex) {
                    Logger.getLogger(JFrame_Scrv_Car_History.class.getName()).log(Level.SEVERE, null, ex);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(JFrame_Scrv_Car_History.class.getName()).log(Level.SEVERE, null, ex);
                }
            }//On aprove option
        } else {
            JOptionPane.showMessageDialog(null, "Please select Vehicle");
        }//IF car selected
    }

     private void seticon() {
         //Sets form icon
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Icons/wrench.png")));
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(JFrame_Scrv_Car_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(JFrame_Scrv_Car_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(JFrame_Scrv_Car_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(JFrame_Scrv_Car_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(() -> {
//            new JFrame_Scrv_Car_History().setVisible(true);
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnBack;
    private javax.swing.JButton jBtnIndividualReports;
    private javax.swing.JButton jBtnPrinrtReport;
    private javax.swing.JButton jBtnShowCarH;
    private javax.swing.JLabel jLabel_close;
    private javax.swing.JLabel jLabel_minimize;
    private javax.swing.JLabel jLblCarAddNumReg;
    private javax.swing.JLabel jLblCarOwnerName;
    private javax.swing.JLabel jLblDateServiced;
    private javax.swing.JLabel jLblDateTime;
    private javax.swing.JLabel jLblOwnerOfCar;
    private javax.swing.JLabel jLblPicMain;
    private javax.swing.JLabel jLblTitle;
    private javax.swing.JLabel jLblTopFrame;
    private javax.swing.JPanel jPnlMain;
    private javax.swing.JPanel jPnlMain2;
    private javax.swing.JPanel jPnlServices;
    private javax.swing.JPanel jPnlTablCars;
    private javax.swing.JPanel jPnlTopFrame;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTb_Cars;
    private javax.swing.JTable jTblServ;
    private javax.swing.JTextField jTxtFldRegNCA;
    // End of variables declaration//GEN-END:variables
}
